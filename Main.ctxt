#BlueJ class context
comment0.params=args
comment0.target=void\ main(java.lang.String[])
comment1.params=filename
comment1.target=java.lang.String\ getSourceCode(java.lang.String)
comment1.text=\r\n\ This\ method\ returns\ R\ code\ read\ from\ a\ file\ as\ a\ String.\r\n
comment10.params=modelType
comment10.target=java.lang.String\ saveModel(java.lang.String)
comment11.params=modelType
comment11.target=void\ runTest(java.lang.String)
comment11.text=\r\n\ This\ method\ runs\ tests\ on\ an\ alrady\ created\ Machine\ learning\ structure.\r\n\ You\ will\ specify\ a\ data\ set\ to\ be\ read\ from\ a\ file.\ features\ will\ have\ been\ supplied\ \r\n\ from\ a\ configuration\ file\r\n
comment12.params=idCol\ actual\ predicted
comment12.target=java.lang.String\ printOutput(java.lang.String[],\ double[],\ double[])
comment12.text=\r\n\ \ \ This\ method\ prints\ the\ output\r\n
comment13.params=idCol\ actual\ predicted
comment13.target=java.lang.String\ printOutput(java.lang.String[],\ java.lang.String[],\ java.lang.String[])
comment13.text=\r\n\ \ \ This\ method\ prints\ the\ output\ takes\ in\ two\ string\ arrays\ to\ compare\ their\ equality\r\n
comment14.params=type
comment14.target=java.lang.String\ createFeatureString(int)
comment14.text=\r\n\ Creates\ a\ String\ that\ will\ be\ passed\ into\ R\ to\ specify\ the\ features.\r\n\ There\ will\ be\ two\ types\ of\ these\ Strings.\ One\ seperated\ by\ plus\ signs\ and\ the\ other\ by\ commas\r\n\ \r\n\ Type\ 0\:\ seperated\ by\ +\r\n\ Type\ 1\ \=\ seperated\ by\ ,\r\n
comment2.params=packageName
comment2.target=void\ checkPackages(java.lang.String)
comment2.text=\r\nThis\ method\ checks\ if\ the\ package\ specified\ is\ installed\ in\ R.\r\n
comment3.params=code
comment3.target=java.lang.String[]\ splitCode(java.lang.String)
comment3.text=\r\n\ \ \ This\ method\ breaks\ the\ R\ code\ into\ portions\ where\ each\ portion\ is\ seperated\ by\r\n\ \ \ "\#BREAK\#"\r\n
comment4.params=
comment4.target=org.rosuda.REngine.REXP\ createANN()
comment4.text=\r\n\ \ \ This\ method\ creates\ an\ ANN\ in\ R\ and\ returns\ the\ ANN\r\n
comment5.params=
comment5.target=java.lang.String\ testANN()
comment6.params=
comment6.target=org.rosuda.REngine.REXP\ createSVM()
comment7.params=
comment7.target=java.lang.String\ testSVM()
comment8.params=
comment8.target=org.rosuda.REngine.REXP\ createBAY()
comment9.params=
comment9.target=java.lang.String\ testBAY()
numComments=15
